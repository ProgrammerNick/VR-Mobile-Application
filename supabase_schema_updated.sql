-- This script resets and defines the entire database schema.
-- It's designed to be run from scratch and is idempotent.

-- Drop existing functions and tables in reverse order of dependency.
DROP FUNCTION IF EXISTS "public"."get_friends";
DROP TABLE IF EXISTS "public"."achievement_likes";
DROP TABLE IF EXISTS "public"."post_comments";
DROP TABLE IF EXISTS "public"."community_posts";
DROP TABLE IF EXISTS "public"."achievements";
DROP TABLE IF EXISTS "public"."user_purchases";
DROP TABLE IF EXISTS "public"."friends";
DROP TABLE IF EXISTS "public"."user_activity";
DROP TABLE IF EXISTS "public"."games";
DROP TABLE IF EXISTS "public"."profiles";

-- Create a 'profiles' table to store public user data
CREATE TABLE "public"."profiles" (
  "id" UUID PRIMARY KEY REFERENCES "auth"."users" ON DELETE CASCADE,
  "username" TEXT UNIQUE,
  "avatar_url" TEXT,
  "updated_at" TIMESTAMPTZ,
  CONSTRAINT "username_length" CHECK (char_length("username") >= 3)
);
COMMENT ON TABLE "public"."profiles" IS 'Stores public profile information for users, linked to their authentication data.';

-- Create the 'games' table with the correct schema
CREATE TABLE "public"."games" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "title" TEXT NOT NULL,
  "category" TEXT,
  "price" NUMERIC(10, 2),
  "duration" TEXT,
  "rating" NUMERIC(3, 1),
  "thumbnail" TEXT,
  "description" TEXT,
  "created_at" TIMESTAMPTZ DEFAULT now() NOT NULL
);
COMMENT ON TABLE "public"."games" IS 'Stores information about different VR/AR games and experiences.';

-- Create the 'achievements' table (updated to match service implementation)
CREATE TABLE "public"."achievements" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" UUID REFERENCES "public"."profiles"("id") ON DELETE CASCADE NOT NULL,
  "created_at" TIMESTAMPTZ DEFAULT now() NOT NULL,
  "game_name" TEXT NOT NULL,
  "achievement_title" TEXT NOT NULL,
  "description" TEXT,
  "screenshot_url" TEXT,
  "likes_count" INTEGER DEFAULT 0
);
COMMENT ON TABLE "public"."achievements" IS 'Stores user achievements for sharing in the community.';

-- Create the 'achievement_likes' table
CREATE TABLE "public"."achievement_likes" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "achievement_id" BIGINT REFERENCES "public"."achievements"("id") ON DELETE CASCADE NOT NULL,
  "user_id" UUID REFERENCES "public"."profiles"("id") ON DELETE CASCADE NOT NULL,
  "created_at" TIMESTAMPTZ DEFAULT now() NOT NULL,
  UNIQUE(achievement_id, user_id)
);
COMMENT ON TABLE "public"."achievement_likes" IS 'Tracks which users have liked which achievements.';

-- Create the 'community_posts' table
CREATE TABLE "public"."community_posts" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" UUID REFERENCES "public"."profiles"("id") ON DELETE SET NULL,
  "title" TEXT NOT NULL,
  "content" TEXT,
  "created_at" TIMESTAMPTZ DEFAULT now() NOT NULL
);
COMMENT ON TABLE "public"."community_posts" IS 'Stores user-generated posts for the community feed.';

-- Create the 'post_comments' table
CREATE TABLE "public"."post_comments" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "post_id" BIGINT REFERENCES "public"."community_posts"("id") ON DELETE CASCADE NOT NULL,
  "user_id" UUID REFERENCES "public"."profiles"("id") ON DELETE SET NULL,
  "content" TEXT NOT NULL,
  "created_at" TIMESTAMPTZ DEFAULT now() NOT NULL
);
COMMENT ON TABLE "public"."post_comments" IS 'Stores comments on community posts.';

-- For user purchases
CREATE TABLE "public"."user_purchases" (
  "user_id" UUID REFERENCES "public"."profiles"("id") ON DELETE CASCADE NOT NULL,
  "game_id" BIGINT REFERENCES "public"."games"("id") ON DELETE CASCADE NOT NULL,
  "purchased_at" TIMESTAMPTZ DEFAULT now() NOT NULL,
  PRIMARY KEY ("user_id", "game_id")
);
COMMENT ON TABLE "public"."user_purchases" IS 'Tracks which games have been purchased by which users.';

-- For friends/social relationships
CREATE TABLE "public"."friends" (
  "user_one_id" UUID REFERENCES "public"."profiles"("id") ON DELETE CASCADE NOT NULL,
  "user_two_id" UUID REFERENCES "public"."profiles"("id") ON DELETE CASCADE NOT NULL,
  "status" TEXT NOT NULL DEFAULT 'pending', -- e.g., pending, accepted, blocked
  "created_at" TIMESTAMPTZ DEFAULT now() NOT NULL,
  PRIMARY KEY ("user_one_id", "user_two_id"),
  CONSTRAINT "check_different_users" CHECK (user_one_id <> user_two_id)
);
COMMENT ON TABLE "public"."friends" IS 'Stores friendship relationships between users.';

-- For user activity
CREATE TABLE "public"."user_activity" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" UUID REFERENCES "public"."profiles"("id") ON DELETE CASCADE NOT NULL,
  "activity" TEXT NOT NULL,
  "game_id" BIGINT REFERENCES "public"."games"("id") ON DELETE SET NULL,
  "created_at" TIMESTAMPTZ DEFAULT now() NOT NULL
);
COMMENT ON TABLE "public"."user_activity" IS 'Tracks a history of user activities.';

-- Enable Row Level Security (RLS) for all tables
ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."games" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."achievements" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."achievement_likes" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."community_posts" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."post_comments" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."user_purchases" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."friends" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."user_activity" ENABLE ROW LEVEL SECURITY;

-- Create policies for profiles
CREATE POLICY "Profiles are viewable by everyone" ON "public"."profiles" FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile" ON "public"."profiles" FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile" ON "public"."profiles" FOR UPDATE USING (auth.uid() = id);

-- Create policies for achievements
CREATE POLICY "Achievements are viewable by everyone" ON "public"."achievements" FOR SELECT USING (true);
CREATE POLICY "Users can insert their own achievements" ON "public"."achievements" FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own achievements" ON "public"."achievements" FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own achievements" ON "public"."achievements" FOR DELETE USING (auth.uid() = user_id);

-- Create policies for achievement likes
CREATE POLICY "Achievement likes are viewable by everyone" ON "public"."achievement_likes" FOR SELECT USING (true);
CREATE POLICY "Users can insert their own likes" ON "public"."achievement_likes" FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can delete their own likes" ON "public"."achievement_likes" FOR DELETE USING (auth.uid() = user_id);

-- Create policies for community posts
CREATE POLICY "Community posts are viewable by everyone" ON "public"."community_posts" FOR SELECT USING (true);
CREATE POLICY "Users can insert their own posts" ON "public"."community_posts" FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own posts" ON "public"."community_posts" FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own posts" ON "public"."community_posts" FOR DELETE USING (auth.uid() = user_id);

-- Create policies for post comments
CREATE POLICY "Post comments are viewable by everyone" ON "public"."post_comments" FOR SELECT USING (true);
CREATE POLICY "Users can insert their own comments" ON "public"."post_comments" FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own comments" ON "public"."post_comments" FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own comments" ON "public"."post_comments" FOR DELETE USING (auth.uid() = user_id);

-- Create policies for user purchases
CREATE POLICY "Users can view their own purchases" ON "public"."user_purchases" FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own purchases" ON "public"."user_purchases" FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Create policies for friends
CREATE POLICY "Users can view their own friendships" ON "public"."friends" FOR SELECT USING (auth.uid() = user_one_id OR auth.uid() = user_two_id);
CREATE POLICY "Users can insert friendships" ON "public"."friends" FOR INSERT WITH CHECK (auth.uid() = user_one_id);
CREATE POLICY "Users can update their own friendships" ON "public"."friends" FOR UPDATE USING (auth.uid() = user_one_id OR auth.uid() = user_two_id);
CREATE POLICY "Users can delete their own friendships" ON "public"."friends" FOR DELETE USING (auth.uid() = user_one_id OR auth.uid() = user_two_id);

-- Create policies for user activity
CREATE POLICY "Users can view their own activity" ON "public"."user_activity" FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own activity" ON "public"."user_activity" FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Seed data for the 'games' table
INSERT INTO "public"."games" ("id", "title", "description", "category", "price", "duration", "rating", "thumbnail") VALUES
(1, 'Cyberpunk City 2077', 'Explore a neon-lit futuristic metropolis with flying cars and towering skyscrapers.', 'Adventure', 12.99, '45 min', 4.8, 'https://images.unsplash.com/photo-1636036704268-017faa3b6557?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3Nzg4Nzd8MHwxfHNlYXJjaHwxfHxnYW1pbmclMjBlbnZpcm9ubWVudCUyMG5lb258ZW58MXx8fHwxNzU2MzU3MjE0fDA&ixlib=rb-4.1.0&q=80&w=1080&utm_source=figma&utm_medium=referral'),
(2, 'Space Station Alpha', 'Experience life aboard an international space station with zero gravity physics.', 'Simulation', 9.99, '30 min', 4.6, 'https://images.unsplash.com/photo-1634893661513-d6d1f579fc63?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3Nzg4Nzd8MHwxfHNlYXJjaHwxfHxmdXR1cmlzdGljJTIwc3BhY2UlMjBlbnZpcm9ubWVudHxlbnwxfHx8fDE3NTYzNTcyMTR8MA&ixlib=rb-4.1.0&q=80&w=1080&utm_source=figma&utm_medium=referral'),
(3, 'Ancient Rome VR', 'Walk through the Roman Forum and Colosseum in their full glory.', 'Education', 14.99, '60 min', 4.9, 'https://images.unsplash.com/photo-1547930206-82ac0a7aa08d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3Nzg4Nzd8MHwxfHNlYXJjaHwxfHxhYnN0cmFjdCUyMGRpZ2l0YWwlMjB3b3JsZHxlbnwxfHx8fDE3NTYzNTcyMTR8MA&ixlib=rb-4.1.0&q=80&w=1080&utm_source=figma&utm_medium=referral'),
(4, 'VR Tutorial Island', 'Learn the basics of VR interaction in this beginner-friendly experience.', 'Tutorial', 0.00, '15 min', 4.3, 'https://images.unsplash.com/photo-1547930206-82ac0a7aa08d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3Nzg4Nzd8MHwxfHNlYXJjaHwxfHxhYnN0cmFjdCUyMGRpZ2l0YWwlMjB3b3JsZHxlbnwxfHx8fDE3NTYzNTcyMTR8MA&ixlib.rb-4.1.0&q=80&w=1080&utm_source=figma&utm_medium=referral');

-- Create RPC functions for updating likes count
CREATE OR REPLACE FUNCTION increment_achievement_likes(achievement_id BIGINT)
RETURNS VOID AS $
BEGIN
  UPDATE achievements 
  SET likes_count = likes_count + 1 
  WHERE id = achievement_id;
END;
$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION decrement_achievement_likes(achievement_id BIGINT)
RETURNS VOID AS $
BEGIN
  UPDATE achievements 
  SET likes_count = GREATEST(likes_count - 1, 0) 
  WHERE id = achievement_id;
END;
$ LANGUAGE plpgsql;